package cn.rlstech.callnumber.utils;import android.app.ActivityManager;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Build;import android.os.Looper;import android.util.Log;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.lang.Thread.UncaughtExceptionHandler;import java.lang.reflect.Field;import java.util.HashMap;import java.util.Map;import cn.rlstech.callnumber.application.GlobalApp;import cn.rlstech.callnumber.module.GlobalConstants;/** * UncaughtException处理类,当程序发生Uncaught异常的时候,有该类来接管程序,并记录发送错误报告. */public class CrashHandler implements UncaughtExceptionHandler {    public static final String TAG = "CrashHandler";    private UncaughtExceptionHandler mDefaultHandler;    private static CrashHandler INSTANCE = new CrashHandler();    private Context mContext;    private Map<String, String> infos = new HashMap<String, String>();                      //用来存储设备信息和异常信息    private CrashHandler() {    }    public static CrashHandler getInstance() {        return INSTANCE;    }    /**     * 初始化     *     * @param context     */    public void init(Context context) {        mContext = context;        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();      //获取系统默认的UncaughtException处理器        Thread.setDefaultUncaughtExceptionHandler(this);                    //设置该CrashHandler为程序的默认处理器    }    /**     * 当UncaughtException发生时会转入该函数来处理     */    @Override    public void uncaughtException(Thread thread, Throwable ex) {        if (!handleException(ex) && mDefaultHandler != null) {            mDefaultHandler.uncaughtException(thread, ex);                  //如果用户没有处理则让系统默认的异常处理器来处理        } else {            try {                Thread.sleep(3000);            } catch (InterruptedException e) {                Log.e(TAG, "error : ", e);            }            GlobalApp app = GlobalApp.getContext();            if (app != null) {                app.exitApp();            }            //退出程序            ActivityManager manager = (ActivityManager) mContext.getSystemService(Context.ACTIVITY_SERVICE);            manager.killBackgroundProcesses(mContext.getPackageName());            System.exit(1);        }    }    /**     * 自定义错误处理,收集错误信息 发送错误报告等操作均在此完成.     *     * @param ex     * @return true:如果处理了该异常信息;否则返回false.     */    private boolean handleException(Throwable ex) {        if (ex == null) {            return false;        }        try {            ex.printStackTrace();            collectDeviceInfo(mContext);            //收集设备参数信息            saveCrashInfo2File(ex);                 //保存日志文件            //使用Toast来显示异常信息            new Thread() {                @Override                public void run() {                    try {                        Looper.prepare();                        ToastUtil.show("很抱歉,程序出现异常,即将退出.");                        Looper.loop();                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }.start();        } catch (Exception e) {            e.printStackTrace();        }        return true;    }    /**     * 收集设备参数信息     *     * @param ctx     */    public void collectDeviceInfo(Context ctx) {        try {            PackageManager pm = ctx.getPackageManager();            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(), PackageManager.GET_ACTIVITIES);            if (pi != null) {                String versionName = pi.versionName == null ? "null" : pi.versionName;                String versionCode = pi.versionCode + "";                infos.put("versionName", versionName);                infos.put("versionCode", versionCode);            }        } catch (NameNotFoundException e) {            Log.e(TAG, "an error occured when collect package info", e);        }        Field[] fields = Build.class.getDeclaredFields();        for (Field field : fields) {            try {                field.setAccessible(true);                infos.put(field.getName(), field.get(null).toString());                Log.d(TAG, field.getName() + " : " + field.get(null));            } catch (Exception e) {                Log.e(TAG, "an error occured when collect crash info", e);            }        }    }    /**     * 保存错误信息到文件中     *     * @param ex     * @return 返回文件名称, 便于将文件传送到服务器     */    private String saveCrashInfo2File(Throwable ex) {        StringBuilder sb = new StringBuilder();        for (Map.Entry<String, String> entry : infos.entrySet()) {            String key = entry.getKey();            String value = entry.getValue();            sb.append(key).append("=").append(value).append("\n");        }        Writer writer = new StringWriter();        PrintWriter printWriter = new PrintWriter(writer);        ex.printStackTrace(printWriter);        Throwable cause = ex.getCause();        while (cause != null) {            cause.printStackTrace(printWriter);            cause = cause.getCause();        }        printWriter.close();        String result = writer.toString();        sb.append(result);        FileUtils.writeFile(GlobalConstants.CRASH_ROOT + "/"                + android.text.format.DateFormat.format("yyyy-MM-dd_hh_mm_ss", System.currentTimeMillis()) + ".crash", sb.toString());        return null;    }}  